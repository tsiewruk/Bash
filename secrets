import os
import re
from pathlib import Path
import argparse
from typing import List, Dict, Set
import json
from datetime import datetime

class SecretScanner:
    def __init__(self):
        # Definicje wzorców dla różnych typów sekretów
        self.patterns = {
            'aws_access_key': r'AKIA[0-9A-Z]{16}',
            'aws_secret_key': r'[0-9a-zA-Z/+]{40}',
            'github_token': r'gh[pousr]_[0-9a-zA-Z]{36}',
            'generic_api_key': r'[aA][pP][iI][-_]?[kK][eE][yY].*[=:]\s*[\'"]*[0-9a-zA-Z]{32,45}[\'"]*',
            'private_key': r'-----BEGIN\s+PRIVATE\s+KEY-----',
            'password_in_code': r'(?i)(password|passwd|pwd)\s*[=:]\s*[\'"]((?!\{\{)[^\'"])+[\'"]',
            'connection_string': r'(?i)(mongodb|postgresql|mysql)://[^\s<>"\']+',
            'google_oauth': r'[0-9]+-[0-9A-Za-z_]{32}\.apps\.googleusercontent\.com',
            'jwt_token': r'eyJ[A-Za-z0-9-_=]+\.[A-Za-z0-9-_=]+\.?[A-Za-z0-9-_.+/=]*',
        }
        
        # Lista rozszerzeń plików do pominięcia
        self.exclude_extensions = {'.jpg', '.jpeg', '.png', '.gif', '.bmp', '.svg', 
                                 '.mp3', '.mp4', '.avi', '.mov', '.pdf', '.zip', 
                                 '.tar', '.gz', '.7z', '.pyc', '.class', '.o', '.so'}
        
        # Lista katalogów do pominięcia
        self.exclude_dirs = {'.git', 'node_modules', 'venv', '.env', '__pycache__', 
                           'build', 'dist', '.idea', '.vscode'}

    def is_binary(self, file_path: str) -> bool:
        """Sprawdza czy plik jest binarny."""
        try:
            with open(file_path, 'tr') as check_file:
                check_file.read(1024)
                return False
        except UnicodeDecodeError:
            return True

    def should_skip_file(self, file_path: str) -> bool:
        """Sprawdza czy plik powinien być pominięty."""
        file_extension = os.path.splitext(file_path)[1].lower()
        if file_extension in self.exclude_extensions:
            return True
        
        path_parts = Path(file_path).parts
        return any(part in self.exclude_dirs for part in path_parts)

    def scan_file(self, file_path: str) -> Dict[str, List[str]]:
        """Skanuje pojedynczy plik w poszukiwaniu sekretów."""
        if self.should_skip_file(file_path) or self.is_binary(file_path):
            return {}

        findings = {}
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
                
            for secret_type, pattern in self.patterns.items():
                matches = re.finditer(pattern, content)
                for match in matches:
                    line_number = content.count('\n', 0, match.start()) + 1
                    if secret_type not in findings:
                        findings[secret_type] = []
                    findings[secret_type].append(f"Linia {line_number}: {match.group()}")
        except Exception as e:
            print(f"Błąd podczas skanowania pliku {file_path}: {str(e)}")
            
        return findings

    def scan_directory(self, directory: str) -> Dict[str, Dict[str, List[str]]]:
        """Skanuje całe repozytorium rekurencyjnie."""
        all_findings = {}
        
        for root, dirs, files in os.walk(directory):
            # Pomijamy wykluczone katalogi
            dirs[:] = [d for d in dirs if d not in self.exclude_dirs]
            
            for file in files:
                file_path = os.path.join(root, file)
                findings = self.scan_file(file_path)
                
                if findings:
                    relative_path = os.path.relpath(file_path, directory)
                    all_findings[relative_path] = findings
                    
        return all_findings

    def generate_report(self, findings: Dict[str, Dict[str, List[str]]], output_file: str):
        """Generuje raporty w formacie JSON i HTML."""
        # Generowanie raportu JSON
        report = {
            'scan_date': datetime.now().isoformat(),
            'total_files_with_secrets': len(findings),
            'findings': findings
        }
        
        json_output = output_file
        with open(json_output, 'w', encoding='utf-8') as f:
            json.dump(report, f, indent=2, ensure_ascii=False)

        # Generowanie raportu HTML
        html_output = output_file.replace('.json', '.html')
        html_content = self._generate_html_report(findings)
        with open(html_output, 'w', encoding='utf-8') as f:
            f.write(html_content)
        
        # Wyświetl podsumowanie w konsoli
        print(f"\nZnaleziono sekrety w {len(findings)} plikach.")
        for file_path, file_findings in findings.items():
            print(f"\nPlik: {file_path}")
            for secret_type, matches in file_findings.items():
                print(f"  {secret_type}: {len(matches)} znalezionych")
        
        print(f"\nRaporty zostały wygenerowane:")
        print(f"- JSON: {json_output}")
        print(f"- HTML: {html_output}")

    def _generate_html_report(self, findings: Dict[str, Dict[str, List[str]]]) -> str:
        """Generuje raport HTML."""
        html_template = """
        <!DOCTYPE html>
        <html lang="pl">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Raport Skanowania Sekretów</title>
            <style>
                body {
                    font-family: Arial, sans-serif;
                    line-height: 1.6;
                    margin: 20px;
                    background-color: #f5f5f5;
                }
                .container {
                    max-width: 1200px;
                    margin: 0 auto;
                    background-color: white;
                    padding: 20px;
                    border-radius: 5px;
                    box-shadow: 0 2px 5px rgba(0,0,0,0.1);
                }
                h1 {
                    color: #333;
                    text-align: center;
                }
                .summary {
                    background-color: #e9ecef;
                    padding: 15px;
                    border-radius: 5px;
                    margin-bottom: 20px;
                }
                .file-section {
                    margin-bottom: 30px;
                    padding: 15px;
                    border: 1px solid #ddd;
                    border-radius: 5px;
                }
                .file-header {
                    background-color: #007bff;
                    color: white;
                    padding: 10px;
                    border-radius: 3px;
                    margin-bottom: 10px;
                }
                .secret-type {
                    margin: 10px 0;
                    padding: 10px;
                    background-color: #f8f9fa;
                    border-left: 4px solid #28a745;
                }
                .secret-instance {
                    margin-left: 20px;
                    color: #dc3545;
                }
                .timestamp {
                    text-align: right;
                    color: #666;
                    font-size: 0.9em;
                    margin-top: 20px;
                }
            </style>
        </head>
        <body>
            <div class="container">
                <h1>Raport Skanowania Sekretów</h1>
                <div class="summary">
                    <h2>Podsumowanie</h2>
                    <p>Data skanowania: {timestamp}</p>
                    <p>Liczba plików z sekretami: {total_files}</p>
                </div>
                <div class="findings">
                    {findings_content}
                </div>
                <div class="timestamp">
                    Raport wygenerowany: {timestamp}
                </div>
            </div>
        </body>
        </html>
        """

        findings_content = ""
        for file_path, file_findings in findings.items():
            findings_content += f"""
                <div class="file-section">
                    <div class="file-header">
                        <h3>{file_path}</h3>
                    </div>
            """
            
            for secret_type, matches in file_findings.items():
                findings_content += f"""
                    <div class="secret-type">
                        <h4>{secret_type}</h4>
                """
                for match in matches:
                    findings_content += f'<div class="secret-instance">{match}</div>'
                findings_content += "</div>"
            
            findings_content += "</div>"

        return html_template.format(
            timestamp=datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            total_files=len(findings),
            findings_content=findings_content
        )

def main():
    parser = argparse.ArgumentParser(description='Skaner sekretów w repozytorium')
    parser.add_argument('path', help='Ścieżka do przeskanowania')
    parser.add_argument('--output', '-o', default='secret_scan_report.json',
                       help='Ścieżka do pliku wyjściowego (domyślnie: secret_scan_report.json)')
    
    args = parser.parse_args()
    
    scanner = SecretScanner()
    print(f"Rozpoczynam skanowanie: {args.path}")
    
    findings = scanner.scan_directory(args.path)
    scanner.generate_report(findings, args.output)
    
    print(f"\nRaport został zapisany do: {args.output}")

if __name__ == '__main__':
    main()
